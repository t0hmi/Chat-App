{"ast":null,"code":"import _asyncToGenerator from \"C:/thomashamon_perso/authentification/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AbortController } from \"./AbortController\";\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { HeaderNames } from \"./HeaderNames\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\"; // Not exported from 'index', this type is internal.\n\n/** @private */\n\nexport class LongPollingTransport {\n  constructor(httpClient, accessTokenFactory, logger, options) {\n    this._httpClient = httpClient;\n    this._accessTokenFactory = accessTokenFactory;\n    this._logger = logger;\n    this._pollAbort = new AbortController();\n    this._options = options;\n    this._running = false;\n    this.onreceive = null;\n    this.onclose = null;\n  } // This is an internal type, not exported from 'index' so this is really just internal.\n\n\n  get pollAborted() {\n    return this._pollAbort.aborted;\n  }\n\n  connect(url, transferFormat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      Arg.isRequired(url, \"url\");\n      Arg.isRequired(transferFormat, \"transferFormat\");\n      Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n      _this._url = url;\n\n      _this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\"); // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\n\n\n      if (transferFormat === TransferFormat.Binary && typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\") {\n        throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\n      }\n\n      const [name, value] = getUserAgentHeader();\n      const headers = {\n        [name]: value,\n        ..._this._options.headers\n      };\n      const pollOptions = {\n        abortSignal: _this._pollAbort.signal,\n        headers,\n        timeout: 100000,\n        withCredentials: _this._options.withCredentials\n      };\n\n      if (transferFormat === TransferFormat.Binary) {\n        pollOptions.responseType = \"arraybuffer\";\n      }\n\n      const token = yield _this._getAccessToken();\n\n      _this._updateHeaderToken(pollOptions, token); // Make initial long polling request\n      // Server uses first long polling request to finish initializing connection and it returns without data\n\n\n      const pollUrl = `${url}&_=${Date.now()}`;\n\n      _this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n      const response = yield _this._httpClient.get(pollUrl, pollOptions);\n\n      if (response.statusCode !== 200) {\n        _this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Mark running as false so that the poll immediately ends and runs the close logic\n\n\n        _this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n        _this._running = false;\n      } else {\n        _this._running = true;\n      }\n\n      _this._receiving = _this._poll(_this._url, pollOptions);\n    })();\n  }\n\n  _getAccessToken() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._accessTokenFactory) {\n        return yield _this2._accessTokenFactory();\n      }\n\n      return null;\n    })();\n  }\n\n  _updateHeaderToken(request, token) {\n    if (!request.headers) {\n      request.headers = {};\n    }\n\n    if (token) {\n      request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\n      return;\n    }\n\n    if (request.headers[HeaderNames.Authorization]) {\n      delete request.headers[HeaderNames.Authorization];\n    }\n  }\n\n  _poll(url, pollOptions) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        while (_this3._running) {\n          // We have to get the access token on each poll, in case it changes\n          const token = yield _this3._getAccessToken();\n\n          _this3._updateHeaderToken(pollOptions, token);\n\n          try {\n            const pollUrl = `${url}&_=${Date.now()}`;\n\n            _this3._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\n\n            const response = yield _this3._httpClient.get(pollUrl, pollOptions);\n\n            if (response.statusCode === 204) {\n              _this3._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\n\n              _this3._running = false;\n            } else if (response.statusCode !== 200) {\n              _this3._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`); // Unexpected status code\n\n\n              _this3._closeError = new HttpError(response.statusText || \"\", response.statusCode);\n              _this3._running = false;\n            } else {\n              // Process the response\n              if (response.content) {\n                _this3._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, _this3._options.logMessageContent)}.`);\n\n                if (_this3.onreceive) {\n                  _this3.onreceive(response.content);\n                }\n              } else {\n                // This is another way timeout manifest.\n                _this3._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              }\n            }\n          } catch (e) {\n            if (!_this3._running) {\n              // Log but disregard errors that occur after stopping\n              _this3._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\n            } else {\n              if (e instanceof TimeoutError) {\n                // Ignore timeouts and reissue the poll.\n                _this3._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\n              } else {\n                // Close the connection with the error as the result.\n                _this3._closeError = e;\n                _this3._running = false;\n              }\n            }\n          }\n        }\n      } finally {\n        _this3._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\"); // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\n        // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\n\n\n        if (!_this3.pollAborted) {\n          _this3._raiseOnClose();\n        }\n      }\n    })();\n  }\n\n  send(data) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this4._running) {\n        return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\n      }\n\n      return sendMessage(_this4._logger, \"LongPolling\", _this4._httpClient, _this4._url, _this4._accessTokenFactory, data, _this4._options);\n    })();\n  }\n\n  stop() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\"); // Tell receiving loop to stop, abort any current request, and then wait for it to finish\n\n\n      _this5._running = false;\n\n      _this5._pollAbort.abort();\n\n      try {\n        yield _this5._receiving; // Send DELETE to clean up long polling on the server\n\n        _this5._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${_this5._url}.`);\n\n        const headers = {};\n        const [name, value] = getUserAgentHeader();\n        headers[name] = value;\n        const deleteOptions = {\n          headers: { ...headers,\n            ..._this5._options.headers\n          },\n          timeout: _this5._options.timeout,\n          withCredentials: _this5._options.withCredentials\n        };\n        const token = yield _this5._getAccessToken();\n\n        _this5._updateHeaderToken(deleteOptions, token);\n\n        yield _this5._httpClient.delete(_this5._url, deleteOptions);\n\n        _this5._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\n      } finally {\n        _this5._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\"); // Raise close event here instead of in polling\n        // It needs to happen after the DELETE request is sent\n\n\n        _this5._raiseOnClose();\n      }\n    })();\n  }\n\n  _raiseOnClose() {\n    if (this.onclose) {\n      let logMessage = \"(LongPolling transport) Firing onclose event.\";\n\n      if (this._closeError) {\n        logMessage += \" Error: \" + this._closeError;\n      }\n\n      this._logger.log(LogLevel.Trace, logMessage);\n\n      this.onclose(this._closeError);\n    }\n  }\n\n}","map":{"version":3,"names":["AbortController","HttpError","TimeoutError","HeaderNames","LogLevel","TransferFormat","Arg","getDataDetail","getUserAgentHeader","sendMessage","LongPollingTransport","constructor","httpClient","accessTokenFactory","logger","options","_httpClient","_accessTokenFactory","_logger","_pollAbort","_options","_running","onreceive","onclose","pollAborted","aborted","connect","url","transferFormat","isRequired","isIn","_url","log","Trace","Binary","XMLHttpRequest","responseType","Error","name","value","headers","pollOptions","abortSignal","signal","timeout","withCredentials","token","_getAccessToken","_updateHeaderToken","pollUrl","Date","now","response","get","statusCode","_closeError","statusText","_receiving","_poll","request","Authorization","Information","content","logMessageContent","e","message","_raiseOnClose","send","data","Promise","reject","stop","abort","deleteOptions","delete","logMessage"],"sources":["C:/thomashamon_perso/authentification/node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _getAccessToken() {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n        return null;\r\n    }\r\n    _updateHeaderToken(request, token) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, this._accessTokenFactory, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url, deleteOptions);\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
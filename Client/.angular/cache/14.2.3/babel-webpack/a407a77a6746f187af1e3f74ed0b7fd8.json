{"ast":null,"code":"import _asyncToGenerator from \"C:/thomashamon_perso/authentification/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport { combineLatest, first } from 'rxjs';\nimport { ChannelActions } from 'src/app/store/channel';\nimport { ChannelSelector } from 'src/app/store/channel/channel.selector';\nimport { UserActions } from 'src/app/store/user';\nimport { UserSelector } from 'src/app/store/user/user.selector';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"src/app/services/chat-hub/chat-hub.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../chat-sidebar/chat-sidebar.component\";\nimport * as i5 from \"../chat-message/chat-message.component\";\nconst _c0 = [\"messages\"];\nconst _c1 = [\"message\"];\n\nfunction ChatMainComponent_ng_container_0_app_chat_message_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chat-message\", 13);\n  }\n\n  if (rf & 2) {\n    const m_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"username\", m_r6.email)(\"message\", m_r6.message)(\"date\", m_r6.creationDate);\n  }\n}\n\nfunction ChatMainComponent_ng_container_0_app_chat_message_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-chat-message\", 13);\n  }\n\n  if (rf & 2) {\n    const nm_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"username\", nm_r7.username)(\"message\", nm_r7.message)(\"date\", nm_r7.now);\n  }\n}\n\nfunction ChatMainComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"app-chat-sidebar\", 1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"h3\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 4)(8, \"div\", 5, 6);\n    i0.ɵɵtemplate(10, ChatMainComponent_ng_container_0_app_chat_message_10_Template, 1, 3, \"app-chat-message\", 7);\n    i0.ɵɵtemplate(11, ChatMainComponent_ng_container_0_app_chat_message_11_Template, 1, 3, \"app-chat-message\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\", 8);\n    i0.ɵɵelement(13, \"textarea\", 9, 10);\n    i0.ɵɵelementStart(15, \"div\", 11);\n    i0.ɵɵlistener(\"click\", function ChatMainComponent_ng_container_0_Template_div_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const data_r1 = restoredCtx.ngIf;\n\n      const _r5 = i0.ɵɵreference(14);\n\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.sendMessage(data_r1.activeChannel == null ? null : data_r1.activeChannel.name, data_r1.user == null ? null : data_r1.user.email, _r5.value, data_r1.activeChannel == null ? null : data_r1.activeChannel.id));\n    });\n    i0.ɵɵelement(16, \"img\", 12);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n\n    const _r2 = i0.ɵɵreference(9);\n\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"email\", data_r1.user == null ? null : data_r1.user.email)(\"channels\", i0.ɵɵpipeBind1(2, 9, ctx_r0.channels$))(\"users\", ctx_r0.users)(\"hubConnection\", ctx_r0.chatHub)(\"activeChannel\", data_r1.activeChannel);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(data_r1.activeChannel == null ? null : data_r1.activeChannel.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"scrollTop\", _r2.scrollHeight);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", data_r1.userMessages);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.newMessages);\n  }\n}\n\nconst _c2 = function (a0, a1, a2, a3) {\n  return {\n    isLogged: a0,\n    user: a1,\n    activeChannel: a2,\n    userMessages: a3\n  };\n};\n\nexport class ChatMainComponent {\n  constructor(store, hub) {\n    this.store = store;\n    this.hub = hub;\n    this.user$ = this.store.select(UserSelector.selectLoggedUser);\n    this.isLogged$ = this.store.select(UserSelector.selectIsLoggedIn);\n    this.channels$ = this.store.select(ChannelSelector.selectMappedChannel);\n    this.activeChannel$ = this.store.select(ChannelSelector.selectActiveChannel);\n    this.messages$ = this.store.select(ChannelSelector.selectChannelMessages);\n    this.chatHub = this.hub.getConnection();\n    this.users = [];\n    this.newMessages = [];\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.store.select(UserSelector.selectIsLoggedIn).pipe(first()).subscribe(isLogged => {\n        if (!isLogged) {\n          _this.store.dispatch(UserActions.tokenData());\n        }\n\n        _this.store.dispatch(ChannelActions.loadChannels());\n      });\n\n      yield _this.chatHub.start();\n\n      _this.chatHub.on('ReceiveMessage', m => {\n        _this.newMessages = [..._this.newMessages, m];\n        console.log(m);\n      });\n\n      _this.chatHub.on('NewUser', users => _this.users = users);\n\n      _this.chatHub.on('RemoveUser', users => _this.users = users);\n\n      combineLatest([_this.store.select(UserSelector.selectLoggedUser), _this.store.select(ChannelSelector.selectActiveChannelName)]).subscribe(([user, channel]) => {\n        if (channel && user?.email) {\n          _this.chatHub.invoke(\"JoinRoom\", channel, user?.email).catch(e => console.log(e));\n        }\n      });\n    })();\n  }\n\n  sendMessage(group, email, message, channelId = 1) {\n    console.log(group);\n\n    if (message) {\n      this.chatHub.invoke(\"SendMessage\", group, email, message, channelId).catch(e => console.log(e));\n      this.messageEl.nativeElement.value = '';\n    }\n  }\n\n}\n\nChatMainComponent.ɵfac = function ChatMainComponent_Factory(t) {\n  return new (t || ChatMainComponent)(i0.ɵɵdirectiveInject(i1.Store), i0.ɵɵdirectiveInject(i2.ChatHubService));\n};\n\nChatMainComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatMainComponent,\n  selectors: [[\"app-chat-main\"]],\n  viewQuery: function ChatMainComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.messages = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.messageEl = _t.first);\n    }\n  },\n  decls: 5,\n  vars: 14,\n  consts: [[4, \"ngIf\"], [3, \"email\", \"channels\", \"users\", \"hubConnection\", \"activeChannel\"], [1, \"chat\"], [1, \"chat__header\"], [1, \"chat__content\"], [1, \"chat__messages\", 3, \"scrollTop\"], [\"messages\", \"\"], [3, \"username\", \"message\", \"date\", 4, \"ngFor\", \"ngForOf\"], [1, \"chat__input\"], [\"type\", \"text\", \"rows\", \"1\", \"placeholder\", \"Type a message here\"], [\"message\", \"\"], [1, \"send\", 3, \"click\"], [\"src\", \"/assets/send.svg\", \"alt\", \"\"], [3, \"username\", \"message\", \"date\"]],\n  template: function ChatMainComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ChatMainComponent_ng_container_0_Template, 17, 11, \"ng-container\", 0);\n      i0.ɵɵpipe(1, \"async\");\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpureFunction4(9, _c2, i0.ɵɵpipeBind1(1, 1, ctx.isLogged$), i0.ɵɵpipeBind1(2, 3, ctx.user$), i0.ɵɵpipeBind1(3, 5, ctx.activeChannel$), i0.ɵɵpipeBind1(4, 7, ctx.messages$)));\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.ChatSidebarComponent, i5.ChatMessageComponent, i3.AsyncPipe],\n  styles: [\"[_nghost-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.chat[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 100%;\\n  background-color: #252329;\\n}\\n\\n.chat__header[_ngcontent-%COMP%] {\\n  height: 70px;\\n  padding: 18px 35px;\\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\\n  color: #E0E0E0;\\n  display: flex;\\n  align-items: center;\\n}\\n\\n@media screen and (max-width: 600px) {\\n  .chat__header[_ngcontent-%COMP%] {\\n    padding-left: 80px;\\n  }\\n}\\n\\n.chat__content[_ngcontent-%COMP%] {\\n  position: relative;\\n  height: calc(100% - 70px);\\n  width: 90%;\\n  margin: 0 auto;\\n  display: flex;\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__messages[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  gap: 35px;\\n  margin-top: 35px;\\n  position: relative;\\n  height: calc(100% - 140px);\\n  min-height: min-content;\\n  overflow-y: scroll;\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__messages[_ngcontent-%COMP%]   app-chat-message[_ngcontent-%COMP%]:first-child {\\n  margin-top: auto !important;\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__input[_ngcontent-%COMP%] {\\n  position: absolute;\\n  width: 100%;\\n  left: 50%;\\n  bottom: 0;\\n  transform: translate(-50%, -50%);\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__input[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%] {\\n  width: 100%;\\n  background: #3C393F;\\n  border-radius: 8px;\\n  padding: 17px;\\n  color: #E0E0E0;\\n  padding-right: 50px;\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__input[_ngcontent-%COMP%]   textarea[_ngcontent-%COMP%]::placeholder {\\n  color: #828282;\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__input[_ngcontent-%COMP%]   .send[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 50%;\\n  right: -9px;\\n  transform: translate(-50%, -50%);\\n  background-color: #2F80ED;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  padding: 9px;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.chat__content[_ngcontent-%COMP%]   .chat__input[_ngcontent-%COMP%]   .send[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  width: 20px;\\n  height: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoYXQtbWFpbi5jb21wb25lbnQuc2NzcyIsIi4uXFwuLlxcLi5cXHNjc3NcXF92YXJpYWJsZXMuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLG1CQUFBO0FBREo7O0FBSUE7RUFDSSxXQUFBO0VBQ0EsWUFBQTtFQUNBLHlCQ0VPO0FESFg7O0FBR0k7RUFDSSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSwyQ0FBQTtFQUNBLGNDZE07RURlTixhQUFBO0VBQ0EsbUJBQUE7QUFEUjs7QUFHUTtFQUNJO0lBQ0csa0JBQUE7RUFEYjtBQUNGOztBQU1JO0VBQ0ksa0JBQUE7RUFDQSx5QkFBQTtFQUNBLFVBQUE7RUFDQSxjQUFBO0VBQ0EsYUFBQTtBQUpSOztBQU9RO0VBQ0ksYUFBQTtFQUNBLHNCQUFBO0VBQ0EsV0FBQTtFQUNBLFNBQUE7RUFFQSxnQkFBQTtFQUVBLGtCQUFBO0VBQ0EsMEJBQUE7RUFDQSx1QkFBQTtFQUNBLGtCQUFBO0FBUFo7O0FBU1k7RUFDSSwyQkFBQTtBQVBoQjs7QUFXUTtFQUNJLGtCQUFBO0VBQ0EsV0FBQTtFQUNBLFNBQUE7RUFDQSxTQUFBO0VBQ0EsZ0NBQUE7QUFUWjs7QUFXWTtFQUNJLFdBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLGNDaEVGO0VEaUVFLG1CQUFBO0FBVGhCOztBQVVnQjtFQUNJLGNBQUE7QUFScEI7O0FBWVk7RUFDSSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxXQUFBO0VBQ0EsZ0NBQUE7RUFDQSx5QkNoRk47RURpRk0sYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxlQUFBO0FBVmhCOztBQVlnQjtFQUNJLFdBQUE7RUFDQSxZQUFBO0FBVnBCIiwiZmlsZSI6ImNoYXQtbWFpbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIkBpbXBvcnQgJy4uLy4uLy4uL3Njc3MvdmFyaWFibGVzJztcclxuXHJcbjpob3N0e1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxufVxyXG5cclxuLmNoYXQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY2hhdC1iZztcclxuXHJcbiAgICAmX19oZWFkZXIge1xyXG4gICAgICAgIGhlaWdodDogNzBweDtcclxuICAgICAgICBwYWRkaW5nOiAxOHB4IDM1cHg7XHJcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDRweCA0cHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcclxuICAgICAgICBjb2xvcjogJG1haW4tY29sb3I7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG5cclxuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xyXG4gICAgICAgICAgICAmIHtcclxuICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiA4MHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAmX19jb250ZW50IHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSA3MHB4KTtcclxuICAgICAgICB3aWR0aDogOTAlO1xyXG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIC5jaGF0X19tZXNzYWdlcyB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICBnYXA6IDM1cHg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAzNXB4O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XHJcbiAgICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gMTQwcHgpO1xyXG4gICAgICAgICAgICBtaW4taGVpZ2h0OiBtaW4tY29udGVudDtcclxuICAgICAgICAgICAgb3ZlcmZsb3cteTogc2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgYXBwLWNoYXQtbWVzc2FnZTpmaXJzdC1jaGlsZCB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiBhdXRvICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5jaGF0X19pbnB1dCB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICAgICAgYm90dG9tOiAwO1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpO1xyXG5cclxuICAgICAgICAgICAgdGV4dGFyZWEge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjM0MzOTNGO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTdweDtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAkbWFpbi1jb2xvcjtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDUwcHg7XHJcbiAgICAgICAgICAgICAgICAmOjpwbGFjZWhvbGRlciB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICM4MjgyODI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC5zZW5kIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICAgICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IC05cHg7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLC01MCUpO1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGN0YS1iZztcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiA5cHg7XHJcbiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjBweDtcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiJGN0YS1iZyA6ICMyRjgwRUQ7XHJcbiRjdGEtZm9udCA6IHdoaXRlO1xyXG4kY3RhLXJhZGl1cyA6IDhweDtcclxuXHJcbiRtYWluLWNvbG9yIDogI0UwRTBFMDtcclxuJHNlY29uZGFyeS1jb2xvciA6ICM4MjgyODI7XHJcbiRsaW5rLWNvbG9yOiAjMkQ5Q0RCO1xyXG5cclxuJGJvcmRlci1jb2xvcjogI0JEQkRCRDtcclxuJGJhY2tncm91bmQtY29sb3IgOiAjMzMzMzMzO1xyXG5cclxuJHNpZGViYXItYmcgOiMxMjBGMTM7XHJcbiRzaWRlYmFyLWZvbnQ6ICNmZmZmZmY7XHJcblxyXG4kY2hhdC1iZyA6ICMyNTIzMjk7XHJcbiJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","combineLatest","first","ChannelActions","ChannelSelector","UserActions","UserSelector","i0","m_r6","nm_r7","ctx_r0","data_r1","ChatMainComponent","constructor","store","hub","select","selectLoggedUser","selectIsLoggedIn","selectMappedChannel","selectActiveChannel","selectChannelMessages","getConnection","ngOnInit","pipe","subscribe","isLogged","dispatch","tokenData","loadChannels","chatHub","start","on","m","newMessages","console","log","users","selectActiveChannelName","user","channel","email","invoke","catch","e","sendMessage","group","message","channelId","messageEl","nativeElement","value","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\thomashamon_perso\\authentification\\src\\app\\components\\chat\\chat-main\\chat-main.component.ts","C:\\thomashamon_perso\\authentification\\src\\app\\components\\chat\\chat-main\\chat-main.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, HostListener, OnInit, ViewChild } from '@angular/core';\nimport { HubConnection } from '@microsoft/signalr';\nimport { Store } from '@ngrx/store';\nimport { combineLatest, first, Observable, withLatestFrom } from 'rxjs';\nimport { ChatHubService } from 'src/app/services/chat-hub/chat-hub.service';\nimport { ChannelActions } from 'src/app/store/channel';\nimport { ChannelSelector } from 'src/app/store/channel/channel.selector';\nimport { UserActions } from 'src/app/store/user';\nimport { UserSelector } from 'src/app/store/user/user.selector';\n\n@Component({\n  selector: 'app-chat-main',\n  templateUrl: './chat-main.component.html',\n  styleUrls: ['./chat-main.component.scss']\n})\nexport class ChatMainComponent implements OnInit {\n\n  @ViewChild('messages')\n  messages!: ElementRef  \n\n  @ViewChild('message')\n  messageEl!: ElementRef\n\n  constructor(private store : Store, private hub : ChatHubService) { }\n\n  user$ = this.store.select(UserSelector.selectLoggedUser);\n  isLogged$ = this.store.select(UserSelector.selectIsLoggedIn);\n  channels$ = this.store.select(ChannelSelector.selectMappedChannel);\n  activeChannel$ = this.store.select(ChannelSelector.selectActiveChannel);\n  messages$ = this.store.select(ChannelSelector.selectChannelMessages);\n\n  chatHub : HubConnection = this.hub.getConnection();\n  users : string[] = []; \n\n  newMessages: any = [];\n\n  async ngOnInit() {\n    this.store.select(UserSelector.selectIsLoggedIn).pipe(first()).subscribe((isLogged) => {\n      if(!isLogged) {\n        this.store.dispatch(UserActions.tokenData());\n      }\n      this.store.dispatch(ChannelActions.loadChannels());\n    });\n    \n    await this.chatHub.start()\n    \n    this.chatHub.on('ReceiveMessage', (m) => {\n      this.newMessages = [...this.newMessages, m]\n      console.log(m)\n    } )\n    this.chatHub.on('NewUser', (users) => this.users = users);\n    this.chatHub.on('RemoveUser', (users) => this.users = users);\n    \n    combineLatest([\n      this.store.select(UserSelector.selectLoggedUser),\n      this.store.select(ChannelSelector.selectActiveChannelName)\n    ]).subscribe(([user, channel]) => {\n        if(channel && user?.email) {\n          this.chatHub.invoke(\"JoinRoom\", channel, user?.email).catch(e => console.log(e));\n        }\n    })\n  }\n\n  sendMessage(group:string | undefined, email : string | undefined, message : string | undefined,channelId : number = 1) {\n    console.log(group)\n    if(message) {\n      this.chatHub.invoke(\"SendMessage\", group,email, message, channelId).catch(e => console.log(e));\n      this.messageEl.nativeElement.value = ''\n    }\n  }\n\n\n\n}\n","<ng-container *ngIf=\"{\n    isLogged : isLogged$ | async,\n    user : user$ | async,\n    activeChannel : activeChannel$ | async,\n    userMessages : messages$ | async\n} as data\">\n<app-chat-sidebar [email]=\"data.user?.email\" [channels]=\"channels$ | async\" [users]=\"users\" [hubConnection]=\"chatHub\" [activeChannel]=\"data.activeChannel\"></app-chat-sidebar>\n<div class=\"chat\">\n    <div class=\"chat__header\">\n        <h3>{{data.activeChannel?.name}}</h3>\n    </div>\n    <div class=\"chat__content\">\n        <div class=\"chat__messages\" #messages [scrollTop]=\"messages.scrollHeight\">\n                <app-chat-message *ngFor=\"let m of data.userMessages\" [username]=\"m.email\" [message]=\"m.message\" [date]=\"m.creationDate\" ></app-chat-message>\n                <app-chat-message *ngFor=\"let nm of newMessages\" [username]=\"nm.username\" [message]=\"nm.message\" [date]=\"nm.now\" ></app-chat-message>\n        </div>\n        <div class=\"chat__input\">\n            <textarea type=\"text\" rows=\"1\" placeholder=\"Type a message here\" #message></textarea>\n            <div class=\"send\" (click)=\"sendMessage(data.activeChannel?.name, data.user?.email, message.value, data.activeChannel?.id)\">\n                <img src=\"/assets/send.svg\" alt=\"\">\n            </div>\n        </div>\n    </div>\n</div>\n</ng-container>"]},"metadata":{},"sourceType":"module"}